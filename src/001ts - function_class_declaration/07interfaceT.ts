/**
 * 接口 interface
 * 接口一方面可以在面向对象编程中表示为 行为的抽象，另外可以用来描述 对象的形状
 * 接口就是把一些类中共有的属性和方法抽象出来，可以用来约束实现此接口的类
 *
 * 一个类可以继承一个类兵实现多个接口
 *
 * 接口就像插件用来增强类的，而抽象类是具体类的抽象概念
 *
 * 一个类可以实现多个接口，一个接口也可以被多个类实现，但是一个类可以有多个子类，但是只有一个父类
 *
 * 接口中可以使用分号或者是逗号分割每一项，也可以什么都不加
 *
 */

/**
 * 抽象类 vs 接口
 * 不同类之间共有的属性或方法，可以抽象成一个结构（Interface）
 *
 * 而抽象类是提供其他类继承的基类，抽象类不允许被实例化，抽象类中的抽象方法必须在子类中实现
 *
 * 抽象类的本质是一个无法被实例化的类，但是抽象类中可以同时有抽象方法和非抽象方法，以及初始化的属性，
 * 而接口仅能够用于描述，接口即不提供方法的实现，也不为属性进行初始化
 *
 * 一个类可以继承一个类或者抽象类，但是可以实现implements多个接口 =》 单继承，多接口
 * 抽象类也是可以实现接口
 */

// interface 用来描述对象，指定对象有哪些属性，属性是什么类型
interface Point {
  x: number;
  y: number;
}

const point: Point = { x: 0, y: 0 }; // Point 这个接口是用来描述对象拥有哪些属性，相当于定义类型

// interface 也可以用来描述行为的抽象
interface Speakable {
  speak(): void; // 因为接口里只能是描述，所以方法都是抽象的
}

interface Eatable {
  eat(): void;
}

// 类可以实现多个接口，但是只能继承一个父类
class Person implements Speakable, Eatable {
  speak() {
    console.log("实现了接口中的抽象方法speak");
  }
  eat() {
    console.log("实现类接口中的抽象方法eat");
  }
}
